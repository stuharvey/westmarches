{"version":3,"sources":["styles.js","App.js","constants.js","serviceWorker.js","index.js"],"names":["Main","styled","main","East","section","West","Board","div","HexRow","HEX_RADIUS","Hex","TRIANGLE_HEIGHT","color","HexTitle","h2","HexDescription","p","BOARD","Array","fill","DEFAULT_HOVER","title","description","URL","parseSheetData","data","rows","reduce","currentRows","entry","cell","row","parseInt","val","$t","length","push","e","console","error","header","map","hex","listA","listB","Error","zipped","forEach","key","i","zip","location","split","n","trim","App","useState","hovered","setHovered","setData","useEffect","a","axios","result","hexes","feed","dataCopy","JSON","parse","stringify","getData","onMouseOver","useCallback","event","target","currentTarget","getAttribute","col","onMouseOut","className","cx","odd","j","data-tip","data-row","data-col","fogOfWar","hidden","type","substring","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5a290e16.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nimport { BOARD_SIZE } from \"./constants\";\n\nconst TRIANGLE_HEIGHT = 7.5;\nconst HEX_RADIUS = 13;\nconst HEX_MARGIN = 1.5;\n\nexport const Main = styled.main`\n  background: lightgray;\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const East = styled.section`\n  flex: 1;\n  opacity: 0.1;\n`;\n\nexport const West = styled.section`\n  flex: 3;\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n  overflow: visible;\n  z-index: 1;\n`;\n\nexport const Board = styled.div`\n  width: ${(HEX_RADIUS + HEX_MARGIN) * 2 * BOARD_SIZE}px;\n  transform: perspective(900px) rotateX(60deg) translateY(200px);\n`;\n\nexport const HexRow = styled.div`\n  clear: left;\n\n  &.hidden {\n    visibility: hidden;\n  }\n\n  &.odd {\n    margin-left: ${HEX_RADIUS + HEX_MARGIN / 2}px;\n  }\n`;\n\nexport const Hex = styled.div`\n  margin-left: ${HEX_MARGIN}px;\n  margin-bottom: ${HEX_MARGIN}px;\n  float: left;\n  margin-top: ${TRIANGLE_HEIGHT}px;\n  width: ${HEX_RADIUS * 2}px;\n  height: ${TRIANGLE_HEIGHT * 2}px;\n  background-color: ${({ color }) => color};\n  position: relative;\n  box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n    0 1px 5px 0 rgba(0, 0, 0, 0.12);\n  transition: transform 0.1s ease-in-out, box-shadow 0.1s ease-in-out;\n\n  &.hidden {\n    visibility: hidden;\n  }\n\n  &:hover {\n    z-index: 10;\n    transform: scale(1.4);\n    box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2),\n      0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n  }\n\n  &::before {\n    content: \"\";\n    width: 0;\n    height: 0;\n    border-bottom: ${TRIANGLE_HEIGHT}px solid ${({ color }) => color};\n    border-left: ${HEX_RADIUS}px solid transparent;\n    border-right: ${HEX_RADIUS}px solid transparent;\n    position: absolute;\n    top: -${TRIANGLE_HEIGHT}px;\n  }\n\n  &::after {\n    content: \"\";\n    width: 0;\n    position: absolute;\n    bottom: -${TRIANGLE_HEIGHT}px;\n    border-top: ${TRIANGLE_HEIGHT}px solid ${({ color }) => color};\n    border-left: ${HEX_RADIUS}px solid transparent;\n    border-right: ${HEX_RADIUS}px solid transparent;\n  }\n`;\n\nexport const HexTitle = styled.h2`\n  font-size: 16px;\n  color: white;\n`;\n\nexport const HexDescription = styled.p`\n  font-size: 14px;\n  color: rgba(255, 255, 255, 0.7);\n  max-width: 375px;\n  white-space: normal;\n`;\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport cx from \"classnames\";\nimport ReactTooltip from \"react-tooltip\";\nimport axios from \"axios\";\n\nimport {\n  Main,\n  East,\n  West,\n  Hex,\n  HexRow,\n  Board,\n  HexTitle,\n  HexDescription\n} from \"./styles\";\nimport { BOARD_SIZE } from \"./constants\";\n\nconst BOARD = Array(BOARD_SIZE).fill(Array(BOARD_SIZE).fill({}));\n\nconst DEFAULT_HOVER = {\n  title: \"Westwall\",\n  description:\n    \"A small but bustling town sitting at the farthest reaches of civilization. Adventurers flock here, seeking fame and fortune in the wilds west of the wall.\"\n};\n\nconst URL =\n  \"https://spreadsheets.google.com/feeds/cells/1-Oc-nzUgM8HB1S7EL9Dgs8i3KpyBC5NUe7G1Fd2KC2I/1/public/full?alt=json\";\n\nfunction zip(listA, listB) {\n  if (listA?.length !== listB?.length) {\n    throw new Error(\"zip() requires two equal length arrays\");\n  }\n  const zipped = {};\n  listA.forEach((key, i) => (zipped[key] = listB[i]));\n  return zipped;\n}\n\nfunction parseSheetData(data) {\n  // take data from the above sheet and parse it to machine readable\n  const rows = data.reduce(\n    (currentRows, entry) => {\n      try {\n        const cell = entry[\"gs$cell\"];\n        const row = parseInt(cell?.row, 10) - 1;\n        const val = cell.$t;\n\n        if (currentRows.length <= row) {\n          currentRows.push([]);\n        }\n        currentRows[row].push(val);\n        return currentRows;\n      } catch (e) {\n        console.error(\"Error parsing rows from API\");\n        throw e;\n      }\n    },\n    [[]]\n  );\n  const [header, ...hexes] = rows;\n  const zipped = hexes.map(hex => zip(header, hex));\n  return zipped.map(hex => ({\n    ...hex,\n    location: hex.location.split(\",\").map(n => parseInt(n.trim()))\n  }));\n}\n\nfunction App() {\n  const [hovered, setHovered] = useState(DEFAULT_HOVER);\n  const [data, setData] = useState(BOARD);\n\n  useEffect(() => {\n    async function getData() {\n      const result = await axios(URL);\n      const hexes = parseSheetData(result?.data?.feed?.entry);\n      const dataCopy = JSON.parse(JSON.stringify(BOARD));\n      hexes.forEach(hex => {\n        const { location } = hex;\n        dataCopy[location[0]][location[1]] = hex;\n      });\n      setData(dataCopy);\n    }\n    getData();\n  }, []);\n\n  const onMouseOver = useCallback(\n    event => {\n      const target = event.currentTarget;\n      const row = parseInt(target.getAttribute(\"data-row\"));\n      const col = parseInt(target.getAttribute(\"data-col\"));\n\n      setHovered({ ...data[row][col] });\n    },\n    [data]\n  );\n  const onMouseOut = useCallback(() => setHovered(DEFAULT_HOVER), []);\n\n  return (\n    <Main>\n      <West className=\"hex-container\">\n        <Board>\n          {data.map((row, i) => (\n            <HexRow key={i} className={cx({ odd: i % 2 === 1 })}>\n              {row.map((hex, j) => {\n                return (\n                  <Hex\n                    key={`${i}-${j}`}\n                    data-tip=\"React-tooltip\"\n                    data-row={i}\n                    data-col={j}\n                    color={\n                      hex?.fogOfWar === \"TRUE\"\n                        ? \"slategray\"\n                        : hex?.color || \"transparent\"\n                    }\n                    onMouseOver={onMouseOver}\n                    onMouseOut={onMouseOut}\n                    className={cx({ hidden: !hex?.title })}\n                  />\n                );\n              })}\n            </HexRow>\n          ))}\n          <HexRow odd>\n            {Array(20)\n              .fill({})\n              .map((row, i) => (\n                <Hex\n                  key={`bottom-${i}`}\n                  data-tip=\"React-tooltip\"\n                  color={\"#383838\"}\n                  className={cx({ hidden: i !== 10 })}\n                />\n              ))}\n          </HexRow>\n        </Board>\n      </West>\n\n      <East />\n\n      <ReactTooltip type=\"dark\">\n        {hovered.fogOfWar === \"TRUE\" ? (\n          <HexDescription>\n            Uncharted territory. Explore at your own risk.\n          </HexDescription>\n        ) : (\n          <>\n            <HexTitle>{hovered.title}</HexTitle>\n            {hovered.description.split(\"\\\\n\").map(description => (\n              <HexDescription key={description.substring(0, 20)}>\n                {description}\n              </HexDescription>\n            ))}\n          </>\n        )}\n      </ReactTooltip>\n    </Main>\n  );\n}\n\nexport default App;\n","export const BOARD_SIZE = 20;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}